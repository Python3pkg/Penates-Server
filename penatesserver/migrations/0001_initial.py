# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-08-05 08:45
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ldapdb.models.fields
import penatesserver.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='DjangoUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. Letters, digits and "/"/@/./+/-/_ only.', max_length=250, unique=True, validators=[django.core.validators.RegexValidator('^[/\\w.@+_\\-]+$', 'Enter a valid username. ', 'invalid')], verbose_name="nom d'utilisateur")),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='pr\xe9nom')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='nom')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='adresse \xe9lectronique')),
                ('is_staff', models.BooleanField(default=False, help_text="Pr\xe9cise si l'utilisateur peut se connecter \xe0 ce site d'administration.", verbose_name='statut \xe9quipe')),
                ('is_active', models.BooleanField(default=True, help_text="Pr\xe9cise si l'utilisateur doit \xeatre consid\xe9r\xe9 comme actif. D\xe9cochez ceci plut\xf4t que de supprimer le compte.", verbose_name='actif')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="date d'inscription")),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=250, unique=True, validators=[django.core.validators.RegexValidator('^[/\\w.@+_\\-]+$', 'Enter a valid username. ', 'invalid')], verbose_name="nom d'utilisateur")),
                ('user_permissions', models.ManyToManyField(related_name='admin_user_set', related_query_name='admin_user', to='auth.Permission')),
            ],
            options={
                'permissions': (('administration', 'can administrate services'), ('supervision', 'can get supervision configuration'), ('dhcp', 'can get DHCP configuration')),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('gid', ldapdb.models.fields.IntegerField(db_column='gidNumber', unique=True)),
                ('members', ldapdb.models.fields.ListField(db_column='memberUid')),
                ('description', ldapdb.models.fields.CharField(blank=True, db_column='description', default='', max_length=500)),
                ('group_type', ldapdb.models.fields.IntegerField(db_column='sambaGroupType', default=None)),
                ('samba_sid', ldapdb.models.fields.CharField(db_column='sambaSID', default='', max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupOfNames',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('members', ldapdb.models.fields.ListField(db_column='member')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn', models.CharField(blank=True, db_index=True, default=None, help_text='hostname.infra.domain', max_length=255, null=True, verbose_name='Host fqdn')),
                ('owner', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Owner username')),
                ('main_ip_address', models.GenericIPAddressField(blank=True, db_index=True, default=None, null=True, verbose_name='Main IP address')),
                ('main_mac_address', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Main MAC address')),
                ('admin_ip_address', models.GenericIPAddressField(blank=True, db_index=True, default=None, null=True, verbose_name='Admin IP address')),
                ('admin_mac_address', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Admin MAC address')),
                ('serial', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Serial number')),
                ('model_name', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Model name')),
                ('location', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Emplacement')),
                ('os_name', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='OS Name')),
                ('bootp_filename', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='BootP filename')),
                ('proc_model', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Proc model')),
                ('proc_count', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Proc count')),
                ('core_count', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Core count')),
                ('memory_size', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Memory size')),
                ('disk_size', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Disk size')),
            ],
        ),
        migrations.CreateModel(
            name='MountPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mount_point', models.CharField(default='/', max_length=255, verbose_name='mount point')),
                ('device', models.CharField(default='/dev', max_length=255, verbose_name='device')),
                ('fs_type', models.CharField(default='ext2', max_length=100, verbose_name='fs type')),
                ('options', models.CharField(blank=True, default='', max_length=100, verbose_name='options')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='penatesserver.Host')),
            ],
        ),
        migrations.CreateModel(
            name='Netgroup',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='cn', max_length=200, primary_key=True, serialize=False)),
                ('triple', ldapdb.models.fields.ListField(db_column='nisNetgroupTriple')),
                ('member', ldapdb.models.fields.ListField(db_column='memberNisNetgroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Principal',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='krbPrincipalName', max_length=200, primary_key=True, serialize=False)),
                ('flags', ldapdb.models.fields.IntegerField(db_column='krbTicketFlags', default=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrincipalTest',
            fields=[
                ('name', models.CharField(db_index=True, max_length=255, primary_key=True, serialize=False)),
                ('flags', models.IntegerField(blank=True, db_index=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecoveryKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('filevault2', 'Filevault 2')], db_index=True, default='filevault2', max_length=255, verbose_name='kind')),
                ('serial_number', models.CharField(db_index=True, default=None, max_length=255, verbose_name='serial number')),
                ('recovery_key', models.TextField(blank=True, default='', verbose_name='recovery key')),
            ],
        ),
        migrations.CreateModel(
            name='SambaDomain',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('rid_base', ldapdb.models.fields.IntegerField(db_column='sambaAlgorithmicRidBase', default=2000)),
                ('sid', ldapdb.models.fields.CharField(db_column='sambaSID', max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='sambaDomainName', max_length=200, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Host fqdn')),
                ('scheme', models.CharField(db_index=True, default='https', max_length=40, verbose_name='Scheme')),
                ('hostname', models.CharField(db_index=True, default='localhost', max_length=255, verbose_name='Service hostname')),
                ('port', models.IntegerField(db_index=True, default=443, verbose_name='Port')),
                ('protocol', models.CharField(choices=[('tcp', 'tcp'), ('udp', 'udp'), ('socket', 'socket')], db_index=True, default='tcp', max_length=10, verbose_name='tcp, udp or socket')),
                ('encryption', models.CharField(choices=[('none', 'No encryption'), ('tls', 'SSL/TLS'), ('starttls', 'START TLS')], db_index=True, default='none', max_length=10, verbose_name='encryption')),
                ('kerberos_service', models.CharField(blank=True, default=None, max_length=40, null=True, verbose_name='Kerberos service')),
                ('description', models.TextField(blank=True, default='Service', verbose_name='description')),
                ('dns_srv', models.CharField(blank=True, default=None, max_length=90, null=True, verbose_name='DNS SRV field')),
                ('status', models.IntegerField(blank=True, db_index=True, default=None, null=True, verbose_name='Status')),
                ('status_last_update', models.DateTimeField(blank=True, db_index=True, default=None, null=True, verbose_name='Status last update')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceAccount',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('fqdn', ldapdb.models.fields.CharField(db_column='uid', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('uid_number', ldapdb.models.fields.IntegerField(db_column='uidNumber', default=None, unique=True)),
                ('gid_number', ldapdb.models.fields.IntegerField(db_column='gidNumber', default=None)),
                ('display_name', ldapdb.models.fields.CharField(db_column='displayName', max_length=200)),
                ('mail', ldapdb.models.fields.CharField(db_column='mail', default=None, max_length=200)),
                ('gecos', ldapdb.models.fields.CharField(db_column='gecos', default=None, max_length=200)),
                ('cn', ldapdb.models.fields.CharField(db_column='cn', default=None, max_length=200, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('sn', ldapdb.models.fields.CharField(db_column='sn', default=None, max_length=200, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('user_password', ldapdb.models.fields.CharField(db_column='userPassword', default=None, max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShinkenService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_name', models.CharField(db_index=True, max_length=255, verbose_name=b'host_name')),
                ('hostgroup_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'hostgroup_name')),
                ('service_description', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'service_description')),
                ('display_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'display_name')),
                ('servicegroups', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'servicegroups')),
                ('is_volatile', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'is_volatile')),
                ('check_command', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'check_command')),
                ('initial_state', models.CharField(blank=True, choices=[(b'o', b'o'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c')], default=None, max_length=255, null=True, verbose_name=b'initial_state')),
                ('max_check_attempts', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'max_check_attempts')),
                ('check_interval', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'check_interval')),
                ('retry_interval', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'retry_interval')),
                ('active_checks_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'active_checks_enabled')),
                ('passive_checks_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'active_checks_enabled')),
                ('check_period', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'check_period')),
                ('obsess_over_service', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'obsess_over_service')),
                ('check_freshness', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'check_freshness')),
                ('freshness_threshold', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'freshness_threshold')),
                ('event_handler', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'event_handler')),
                ('event_handler_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'event_handler_enabled')),
                ('low_flap_threshold', models.FloatField(blank=True, default=None, null=True, verbose_name=b'low_flap_threshold')),
                ('high_flap_threshold', models.FloatField(blank=True, default=None, null=True, verbose_name=b'high_flap_threshold')),
                ('flap_detection_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'flap_detection_enabled')),
                ('flap_detection_options', models.CharField(blank=True, choices=[(b'o', b'o'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c')], default=None, max_length=255, null=True, verbose_name=b'flap_detection_options')),
                ('process_perf_data', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'process_perf_data')),
                ('retain_status_information', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'retain_status_information')),
                ('retain_nonstatus_information', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'retain_nonstatus_information')),
                ('notification_interval', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'notification_interval')),
                ('first_notification_delay', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'first_notification_delay')),
                ('notification_period', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'notification_period')),
                ('notification_options', models.CharField(blank=True, choices=[(b'r', b'r'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c'), (b'f', b'f'), (b's', b's')], default=None, max_length=255, null=True, verbose_name=b'notification_options')),
                ('notifications_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'notifications_enabled')),
                ('contacts', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'contacts')),
                ('contact_groups', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'contact_groups')),
                ('stalking_options', models.CharField(blank=True, choices=[(b'o', b'o'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c')], default=None, max_length=255, null=True, verbose_name=b'stalking_options')),
                ('notes', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'notes')),
                ('notes_url', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'notes_url')),
                ('action_url', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'action_url')),
                ('poller_tag', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'poller_tag')),
                ('icon_set', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'icon_set')),
                ('icon_image', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'icon_image')),
                ('icon_image_alt', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'icon_image_alt')),
                ('reactionner_tag', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'reactionner_tag')),
                ('duplicate_foreach', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'duplicate_foreach')),
                ('service_dependencies', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'service_dependencies')),
                ('business_impact', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'business_impact')),
                ('maintenance_period', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'maintenance_period')),
                ('host_dependency_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'host_dependency_enabled')),
                ('labels', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'labels')),
                ('business_rule_output_template', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'business_rule_output_template')),
                ('business_rule_smart_notifications', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'business_rule_smart_notifications')),
                ('business_rule_downtime_as_ack', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'business_rule_downtime_as_ack')),
                ('business_rule_host_notification_options', models.CharField(blank=True, choices=[(b'r', b'r'), (b'd', b'd'), (b'u', b'u'), (b'f', b'f'), (b's', b's')], default=None, max_length=255, null=True, verbose_name=b'business_rule_host_notification_options')),
                ('business_rule_service_notification_options', models.CharField(blank=True, choices=[(b'r', b'r'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c'), (b'f', b'f'), (b's', b's')], default=None, max_length=255, null=True, verbose_name=b'business_rule_service_notification_options')),
                ('snapshot_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'snapshot_enabled')),
                ('snapshot_command', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'snapshot_command')),
                ('snapshot_period', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'snapshot_period')),
                ('snapshot_criteria', models.CharField(blank=True, choices=[(b'o', b'o'), (b'w', b'w'), (b'u', b'u'), (b'c', b'c')], default=None, max_length=255, null=True, verbose_name=b'snapshot_criteria')),
                ('snapshot_interval', models.IntegerField(blank=True, default=None, null=True, verbose_name=b'snapshot_interval')),
                ('trigger_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name=b'trigger_name')),
                ('trigger_broker_raise_enabled', models.IntegerField(blank=True, choices=[(0, b'0'), (1, b'1')], default=None, null=True, verbose_name=b'trigger_broker_raise_enabled')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('dn', models.CharField(max_length=200)),
                ('name', ldapdb.models.fields.CharField(db_column='uid', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('display_name', ldapdb.models.fields.CharField(db_column='displayName', max_length=200)),
                ('uid_number', ldapdb.models.fields.IntegerField(db_column='uidNumber', default=None, unique=True)),
                ('gid_number', ldapdb.models.fields.IntegerField(db_column='gidNumber', default=None)),
                ('login_shell', ldapdb.models.fields.CharField(db_column='loginShell', default='/bin/bash', max_length=200)),
                ('description', ldapdb.models.fields.CharField(db_column='description', default='Description', max_length=200)),
                ('jpeg_photo', penatesserver.models.ImageField(db_column='jpegPhoto', max_length=10000000)),
                ('phone', ldapdb.models.fields.CharField(db_column='telephoneNumber', default=None, max_length=200)),
                ('samba_acct_flags', ldapdb.models.fields.CharField(db_column='sambaAcctFlags', default='[UX         ]', max_length=200)),
                ('user_smime_certificate', ldapdb.models.fields.CharField(db_column='userSMIMECertificate', default=None, max_length=200)),
                ('user_certificate', ldapdb.models.fields.CharField(db_column='userCertificate', default=None, max_length=200)),
                ('samba_sid', ldapdb.models.fields.CharField(db_column='sambaSID', default=None, max_length=200)),
                ('primary_group_samba_sid', ldapdb.models.fields.CharField(db_column='sambaPrimaryGroupSID', default=None, max_length=200)),
                ('home_directory', ldapdb.models.fields.CharField(db_column='homeDirectory', default=None, max_length=200)),
                ('mail', ldapdb.models.fields.CharField(db_column='mail', default=None, max_length=200)),
                ('samba_domain_name', ldapdb.models.fields.CharField(db_column='sambaDomainName', default=None, max_length=200)),
                ('gecos', ldapdb.models.fields.CharField(db_column='gecos', default=None, max_length=200)),
                ('cn', ldapdb.models.fields.CharField(db_column='cn', default=None, max_length=200, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('sn', ldapdb.models.fields.CharField(db_column='sn', default=None, max_length=200, validators=[django.core.validators.RegexValidator('^[a-zA-Z][\\w_\\-]{0,199}$')])),
                ('user_password', ldapdb.models.fields.CharField(db_column='userPassword', default=None, max_length=200)),
                ('ast_account_caller_id', ldapdb.models.fields.CharField(db_column='AstAccountCallerID', default=None, max_length=200)),
                ('ast_account_context', ldapdb.models.fields.CharField(db_column='AstAccountContext', default='LocalSets', max_length=200)),
                ('ast_account_DTMF_mode', ldapdb.models.fields.CharField(db_column='AstAccountDTMFMode', default='rfc2833', max_length=200)),
                ('ast_account_mailbox', ldapdb.models.fields.CharField(db_column='AstAccountMailbox', default=None, max_length=200)),
                ('ast_account_NAT', ldapdb.models.fields.CharField(db_column='AstAccountNAT', default='yes', max_length=200)),
                ('ast_account_qualify', ldapdb.models.fields.CharField(db_column='AstAccountQualify', default='yes', max_length=200)),
                ('ast_account_type', ldapdb.models.fields.CharField(db_column='AstAccountType', default='friend', max_length=200)),
                ('ast_account_disallowed_codec', ldapdb.models.fields.CharField(db_column='AstAccountDisallowedCodec', default='all', max_length=200)),
                ('ast_account_allowed_codec', ldapdb.models.fields.CharField(db_column='AstAccountAllowedCodec', default='ulaw', max_length=200)),
                ('ast_account_music_on_hold', ldapdb.models.fields.CharField(db_column='AstAccountMusicOnHold', default='default', max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WifiNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssid', models.CharField(db_index=True, max_length=255, verbose_name='SSID')),
                ('hidden_network', models.BooleanField(default=False, verbose_name='hidden?')),
                ('encryption_type', models.CharField(blank=True, choices=[('WEP', 'WEP'), ('WPA', 'WPA'), ('Any', 'Any')], default=None, max_length=30, null=True, verbose_name='encryption type')),
                ('is_hotspot', models.BooleanField(default=False, verbose_name='hidden?')),
                ('password', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Password')),
            ],
        ),
        migrations.AddField(
            model_name='djangouser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='djangouser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
